class Node:
    def __init__(self,data,priority):
        self.data=data
        self.priority=priority
        self.next=None
class priorityqueue:
    def __init__(self):
        self.head=None
    def is_empty(self):
        return self.head is None
    def enqueue(self,data,priority):
        new_node=Node(data,priority)
        if self.is_empty() or priority>self.head.priority:
            new_node.next=self.head
            self.head=new_node
        else:
            current=self.head
            while current.next and priority<=current.next.priority:
                current=current.next
            new_node.next=current.next
            current.next=new_node
    def dequeue(self):
        if self.is_empty():
            return None
        else:
            removed_node=self.head
            self.head=self.head.next
            return removed_node.data
    def display(self):
        current=self.head
        while current:
            print(f"Data: {current.data}.Priority: {current.priority}")
            current=current.next

p1=priorityqueue()
p1.enqueue("Task 1",3)
p1.enqueue("Task 2",1)
p1.enqueue("Task 3",2)
print("priority queue: ")
p1.display()
print("\nDequeue operation result:",p1.dequeue())
print("\nPriority queue after dequeue: ")
p1.display()



#output
#priority queue: 
#Data: Task 1.Priority: 3
#Data: Task 3.Priority: 2
#Data: Task 2.Priority: 1

#Dequeue operation result: Task 1

#Priority queue after dequeue: 
#Data: Task 3.Priority: 2
#Data: Task 2.Priority: 1
