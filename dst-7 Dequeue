class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

class Deque:
    def __init__(self):
        self.front = None
        self.rear = None

    def is_empty(self):
        return self.front is None

    def insert_front(self, data):
        new_node = Node(data)
        if self.is_empty():
            self.front = self.rear = new_node
        else:
            new_node.next = self.front
            self.front.prev = new_node
            self.front = new_node

    def insert_rear(self, data):
        new_node = Node(data)
        if self.is_empty():
            self.front = self.rear = new_node
        else:
            new_node.prev = self.rear
            self.rear.next = new_node
            self.rear = new_node

    def delete_front(self):
        if self.is_empty():
            print("Deque is empty. Cannot delete from front.")
            return None
        data = self.front.data
        self.front = self.front.next
        if self.front is not None:
            self.front.prev = None
        else:
            self.rear = None
        return data

    def delete_rear(self):
        if self.is_empty():
            print("Deque is empty. Cannot delete from rear.")
            return None
        data = self.rear.data
        self.rear = self.rear.prev
        if self.rear is not None:
            self.rear.next = None
        else:
            self.front = None
        return data

    def display(self):
        if self.is_empty():
            print("Deque is empty.")
            return
        current = self.front
        while current:
            print(current.data, end=" <-> ")
            current = current.next
        print("None")

# Example usage
deque = Deque()
deque.insert_front(10)
deque.insert_rear(20)
deque.insert_front(5)
deque.insert_rear(25)
deque.display()  # Output: 5 <-> 10 <-> 20 <-> 25 <-> None

print("Deleted from front:", deque.delete_front())  # Output: 5
deque.display()  # Output: 10 <-> 20 <-> 25 <-> None

print("Deleted from rear:", deque.delete_rear())  # Output: 25
deque.display()  # Output: 10 <-> 20 <-> None
